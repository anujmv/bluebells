"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOptions = void 0;
const loader_utils_1 = __importDefault(require("loader-utils"));
function getOptions(loadContext, includeQuery = true, convertStringQueryParamsToNumber = false) {
    const options = loader_utils_1.default.getOptions(loadContext);
    const queryObject = includeQuery && loadContext.resourceQuery
        ? loader_utils_1.default.parseQuery(loadContext.resourceQuery)
        : null;
    const fullOptions = {
        ...options,
        ...(convertStringQueryParamsToNumber
            ? attemptToConvertValuesToNumbers(queryObject)
            : queryObject),
    };
    return fullOptions;
}
exports.getOptions = getOptions;
function attemptToConvertValuesToNumbers(object) {
    if (!object)
        return null;
    const result = { ...object };
    Object.keys(result).forEach((key) => {
        if (isNumeric(result[key])) {
            result[key] = Number(result[key]);
        }
    });
    return result;
}
// https://stackoverflow.com/a/175787
function isNumeric(string) {
    if (typeof string !== "string")
        return false;
    // @ts-expect-error using isNaN to test string, works but typescript doesn't like
    return !isNaN(string) && !isNaN(parseFloat(string));
}
